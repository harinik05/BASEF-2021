/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "0.6/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 5.899236701521074 -0.8725540896685644 0.02601634274349063 );
            tangentialForce ( 31.52504387290425 -0.1697711379690689 -0.0901784729185295 );
            porousForce     ( 0 0 0 );
            normalMoment    ( -6.34581504046241 -8.88471892487286 -19.60911270528576 );
            tangentialMoment ( -0.1795501311915724 3.616584021501254 -74.73014019987099 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.02993942445954026;
            Cs              5.132970414003108e-05;
            Cl              -0.0008338601821101067;
            CmRoll          -0.005220292137323187;
            CmPitch         0.0754714023241254;
            CmYaw           -0.004214507922697285;
            Cd(f)           0.009749420092446942;
            Cd(r)           0.02019000436709332;
            Cs(f)           -0.00418884307062727;
            Cs(r)           0.0042401727747673;
            Cl(f)           0.07505447223307035;
            Cl(r)           -0.07588833241518045;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -1.030448769305481;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( -0.3055950208339585 0.1939543540603737 -1.153292938405395 );
        }
    }
}


// ************************************************************************* //
