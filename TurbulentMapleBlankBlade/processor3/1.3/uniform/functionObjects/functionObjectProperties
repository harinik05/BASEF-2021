/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "1.3/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 6.341903695755073 -4.171214484861538 -0.3268486584302953 );
            tangentialForce ( 27.38357068927672 0.3850829934971515 -0.02661294961825518 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 0.489401716238229 -1.040137708369252 -31.84614291189041 );
            tangentialMoment ( 0.1049912722415787 2.347379657481124 -64.59112088255941 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.02698037950802544;
            Cs              0.0002827692864388404;
            Cl              -0.003028905193091509;
            CmRoll          0.0004755143907838462;
            CmPitch         0.07714981103555986;
            CmYaw           0.001045793559289498;
            Cd(f)           0.01396570414479657;
            Cd(r)           0.01301467536322887;
            Cs(f)           0.001187178202508918;
            Cs(r)           -0.000904408916070078;
            Cl(f)           0.0756353584390141;
            Cl(r)           -0.07866426363210562;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.743852694434375;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.3214563795647128 -0.1392478074684367 -1.731982825511363 );
        }
    }
}


// ************************************************************************* //
