/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "1/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 6.490668820758491 -4.053112216805124 1.21271618380725 );
            tangentialForce ( 28.66993614139488 0.21620573714989 -0.02482961328736378 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 4.083046189806641 -7.438387340826369 -32.3176668770741 );
            tangentialMoment ( -0.07136023856482854 2.784392888568443 -67.75145393507428 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.0281284839697227;
            Cs              -0.0009503092564159092;
            Cl              -0.003069525183724187;
            CmRoll          0.00320934876099345;
            CmPitch         0.08005529664971872;
            CmYaw           -0.003723195561806341;
            Cd(f)           0.0172735907458548;
            Cd(r)           0.0108548932238679;
            Cs(f)           -0.004198350190014296;
            Cs(r)           0.003248040933598386;
            Cl(f)           0.07852053405785663;
            Cl(r)           -0.08159005924158082;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.6531469414087908;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.1685671821293889 -0.2410344261789413 -1.374553865399849 );
        }
    }
}


// ************************************************************************* //
