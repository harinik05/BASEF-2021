/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "0.5/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 7.416668424766525 -4.913733273422658 2.573465168721684 );
            tangentialForce ( 32.54438418792737 0.1759894442141089 0.07234665496094156 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 8.659840599461806 -19.44122242880614 -38.52232685930274 );
            tangentialMoment ( 0.2956606364152274 2.635965465659698 -75.16118199069349 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.03196884209015512;
            Cs              -0.002116649458946101;
            Cl              -0.00379019506336684;
            CmRoll          0.007164400988701627;
            CmPitch         0.090946807079997;
            CmYaw           -0.01344420557051716;
            Cd(f)           0.02314882203377919;
            Cd(r)           0.008820020056375931;
            Cs(f)           -0.01450253029999021;
            Cs(r)           0.0123858808410441;
            Cl(f)           0.08905170954831358;
            Cl(r)           -0.09284190461168042;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.7817566581198633;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.2084754449339241 0.5947571957292388 -0.8962305890381014 );
        }
    }
}


// ************************************************************************* //
