/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "2.2/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 5.549761520623719 -2.837610709243035 7.671344139815026 );
            tangentialForce ( 25.6027493528272 0.8639957812297567 0.02111244820294672 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 27.42385162128301 -67.05743629142889 -26.4104239640347 );
            tangentialMoment ( 0.1331586790061218 1.859684315456762 -59.01533590815571 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.02492200869876074;
            Cs              -0.006153965270414378;
            Cl              -0.001578891942410622;
            CmRoll          0.0220456082402313;
            CmPitch         0.06834060789775233;
            CmYaw           -0.0521582015807777;
            Cd(f)           0.03450661258961167;
            Cd(r)           -0.009584603890850935;
            Cs(f)           -0.0552351842159849;
            Cs(r)           0.04908121894557051;
            Cl(f)           0.06755116192654702;
            Cl(r)           -0.06913005386895764;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) 0.4328085683155877;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 1.009344528545253 -0.2987430759072685 -1.910715623210336 );
        }
    }
}


// ************************************************************************* //
