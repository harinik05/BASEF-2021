/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "1.9/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 6.287374624879216 -3.689579261166063 4.599983913915515 );
            tangentialForce ( 26.15644298770959 0.4339848931388547 -0.1366888904962067 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 12.65148549739217 -28.30693114795626 -30.62258799340112 );
            tangentialMoment ( -0.24453823756386 3.131913052996954 -62.19641882187267 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.02595505409007105;
            Cs              -0.003570636018735446;
            Cl              -0.002604475494421767;
            CmRoll          0.009925557807862648;
            CmPitch         0.07425520545221903;
            CmYaw           -0.02014001447596744;
            Cd(f)           0.02290308485289817;
            Cd(r)           0.003051969237172875;
            Cs(f)           -0.02192533248533517;
            Cs(r)           0.01835469646659972;
            Cl(f)           0.07295296770500814;
            Cl(r)           -0.07555744319942992;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.5944852720596816;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.1694787553521091 -0.396737217228724 -1.957143915020871 );
        }
    }
}


// ************************************************************************* //
