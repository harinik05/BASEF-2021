/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "0.7/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 7.106454230352988 -4.606610851368957 3.297105408718964 );
            tangentialForce ( 30.59604847712575 0.1312047427067197 -0.009873074849401867 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 5.799723563859828 -12.58355252918923 -36.95974302457618 );
            tangentialMoment ( -0.0382529040991462 3.05854288560735 -71.85667112277564 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.03016200216598299;
            Cs              -0.00262978586709565;
            Cl              -0.00358032488692979;
            CmRoll          0.004609176527808546;
            CmPitch         0.08705313131788146;
            CmYaw           -0.007620007714865509;
            Cd(f)           0.01969017761080004;
            Cd(r)           0.01047182455518295;
            Cs(f)           -0.008934900648413334;
            Cs(r)           0.006305114781317684;
            Cl(f)           0.08526296887441656;
            Cl(r)           -0.08884329376134636;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.6670852764064988;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.08263174940429829 0.1930926730779211 -1.203324644648571 );
        }
    }
}


// ************************************************************************* //
