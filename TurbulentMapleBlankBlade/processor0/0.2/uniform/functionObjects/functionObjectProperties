/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "0.2/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 9.464874523051103 -6.570347896446631 4.105200271190567 );
            tangentialForce ( 38.16351205580568 0.1749204933448905 0.05825694521150891 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 12.22412938025581 -23.38632342144193 -51.34615384487685 );
            tangentialMoment ( 0.266777653551434 3.33551673737602 -86.64245671630204 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.03810270926308543;
            Cs              -0.003330765773121661;
            Cl              -0.005116341922481392;
            CmRoll          0.009992725627045796;
            CmPitch         0.1103908884489431;
            CmYaw           -0.01604064534725273;
            Cd(f)           0.02904408025858851;
            Cd(r)           0.009058629004496921;
            Cs(f)           -0.01770602823381356;
            Cs(r)           0.0143752624606919;
            Cl(f)           0.1078327174877024;
            Cl(r)           -0.1129490594101838;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.7978656708440826;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.4976755560532709 1.316661859781045 -0.5259106687119288 );
        }
    }
}


// ************************************************************************* //
