/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "0.3/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 7.552241646017542 -4.820579450405546 1.968623525257076 );
            tangentialForce ( 35.73025753043961 0.1462906526074162 0.1532511369425669 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 8.240103506687822 -16.69993025133015 -40.48954194063617 );
            tangentialMoment ( 0.4770454774512228 2.501804985262439 -81.817079140304 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.03462599934116573;
            Cs              -0.001697499729759715;
            Cl              -0.003739431038238504;
            CmRoll          0.006973719187311236;
            CmPitch         0.09784529686475213;
            CmYaw           -0.01135850021285417;
            Cd(f)           0.0242867188578941;
            Cd(r)           0.01033928048327163;
            Cs(f)           -0.01220725007773403;
            Cs(r)           0.01050975034797431;
            Cl(f)           0.09597558134563287;
            Cl(r)           -0.09971501238387138;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.7325820114355547;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.4682889376338404 1.009896405997275 -0.7198288958199848 );
        }
    }
}


// ************************************************************************* //
