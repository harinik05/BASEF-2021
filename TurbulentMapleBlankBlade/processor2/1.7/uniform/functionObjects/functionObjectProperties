/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "1.7/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 6.218702681469896 -3.107554411698891 1.861786468695316 );
            tangentialForce ( 26.45178795951582 0.3967198802461319 -0.03629440239869067 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 5.568998879302492 -12.93191861481826 -27.87151917219986 );
            tangentialMoment ( -0.03112086703018804 2.670422179519999 -63.24960792116546 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              0.02613639251278857;
            Cs              -0.0014603936530373;
            Cl              -0.002168667625162208;
            CmRoll          0.004430302409817843;
            CmPitch         0.07289690167469226;
            CmYaw           -0.00820919714823861;
            Cd(f)           0.01749849866621213;
            Cd(r)           0.008637893846576443;
            Cs(f)           -0.008939393974757261;
            Cs(r)           0.00747900032171996;
            Cl(f)           0.07181256786211115;
            Cl(r)           -0.07398123548727337;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.577483022218632;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.04303592931506869 -0.1802557833481583 -1.896806666138591 );
        }
    }
}


// ************************************************************************* //
