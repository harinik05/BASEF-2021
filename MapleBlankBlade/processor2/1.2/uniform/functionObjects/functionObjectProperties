/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "1.2/uniform/functionObjects";
    object      functionObjectProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

results
{
    forces
    {
        vector
        {
            normalForce     ( 6.51000495324872 -4.223253501008479 -0.1786890019627642 );
            tangentialForce ( 27.87389334400096 0.3750249677450327 -0.01392257019723751 );
            porousForce     ( 0 0 0 );
            normalMoment    ( 1.644327738816104 -3.318562274817599 -32.75780005249761 );
            tangentialMoment ( 0.07758320507690979 2.673154556520555 -65.48050750868751 );
            porousMoment    ( 0 0 0 );
        }
    }
    forceCoeffs
    {
        scalar
        {
            Cd              2.750711863779974;
            Cs              0.01540892577280014;
            Cl              -0.3078582826610756;
            CmRoll          0.1377528755114411;
            CmPitch         7.859064604894808;
            CmYaw           -0.05163261746376355;
            Cd(f)           1.513108807401428;
            Cd(r)           1.237603056378546;
            Cs(f)           -0.04392815457736348;
            Cs(r)           0.05933708035016361;
            Cl(f)           7.70513546356427;
            Cl(r)           -8.012993746225346;
        }
    }
    surfaceFieldValue
    {
        scalar
        {
            areaAverage(peak,p) -0.6061394432933499;
        }
        vector
        {
            areaAverage(peak,U) ( 0 0 0 );
            areaAverage(peak,vorticity) ( 0.1275528119021302 -0.07097927513536102 -1.641178867653965 );
        }
    }
}


// ************************************************************************* //
